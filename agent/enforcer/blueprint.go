// Copyright (c) 2016 Pani Networks
// All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License. You may obtain
// a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations
// under the License.

// This file if generate. Do not edit.

package enforcer

import (
	"github.com/romana/core/agent/firewall"
	"github.com/romana/core/common/api"
)

var blueprints = map[string]RuleBlueprint{
                                   
	MakeBlueprintKey(
		api.PolicyDirectionIngress,
		SchemePolicyOnTop,
		PeerCIDR,
		TargetTenant,
	): RuleBlueprint{
		baseChain:        firewall.ChainNameEndpointIngress,
		topRuleMatch:     matchEndpoint(""),
		topRuleAction:    MakeRomanaPolicyName,
		secondBaseChain:  MakeRomanaPolicyName,
		secondRuleMatch:  makeDstTenantMatch,
		secondRuleAction: MakeRomanaPolicyNameExtended,
		thirdBaseChain:   MakeRomanaPolicyNameExtended,
		thirdRuleMatch:   makeSrcCIDRMatch,
		thirdRuleAction:  MakeRomanaPolicyNameExtended,
		fourthBaseChain:  MakeRomanaPolicyNameRules,
		fourthRuleMatch:  MakePolicyRuleWithAction,
		fourthRuleAction: "ACCEPT",
	},
                  
	MakeBlueprintKey(
		api.PolicyDirectionEgress,
		SchemePolicyOnTop,
		PeerCIDR,
		TargetTenant,
	): RuleBlueprint{
		baseChain:        firewall.ChainNameEndpointEgress,
		topRuleMatch:     matchEndpoint(""),
		topRuleAction:    MakeRomanaPolicyName,
		secondBaseChain:  MakeRomanaPolicyName,
		secondRuleMatch:  makeSrcTenantMatch,
		secondRuleAction: MakeRomanaPolicyNameExtended,
		thirdBaseChain:   MakeRomanaPolicyNameExtended,
		thirdRuleMatch:   makeDstCIDRMatch,
		thirdRuleAction:  MakeRomanaPolicyNameExtended,
		fourthBaseChain:  MakeRomanaPolicyNameRules,
		fourthRuleMatch:  MakePolicyRuleWithAction,
		fourthRuleAction: "DROP",
	},
                  
	MakeBlueprintKey(
		api.PolicyDirectionIngress,
		SchemeTargetOnTop,
		PeerCIDR,
		TargetTenant,
	): RuleBlueprint{
		baseChain:        firewall.ChainNameEndpointIngress,
		topRuleMatch:     makeDstTenantMatch,
		topRuleAction:    MakeRomanaPolicyName,
		secondBaseChain:  matchPolicyString(""),
		secondRuleMatch:  matchEndpoint(""),
		secondRuleAction: matchPolicyString(""),
		thirdBaseChain:   MakeRomanaPolicyName,
		thirdRuleMatch:   makeSrcCIDRMatch,
		thirdRuleAction:  MakeRomanaPolicyName,
		fourthBaseChain:  MakeRomanaPolicyNameRules,
		fourthRuleMatch:  MakePolicyRuleWithAction,
		fourthRuleAction: "ACCEPT",
	},
                  
	MakeBlueprintKey(
		api.PolicyDirectionEgress,
		SchemeTargetOnTop,
		PeerCIDR,
		TargetTenant,
	): RuleBlueprint{
		baseChain:        firewall.ChainNameEndpointEgress,
		topRuleMatch:     makeSrcTenantMatch,
		topRuleAction:    MakeRomanaPolicyName,
		secondBaseChain:  matchPolicyString(""),
		secondRuleMatch:  matchEndpoint(""),
		secondRuleAction: matchPolicyString(""),
		thirdBaseChain:   MakeRomanaPolicyName,
		thirdRuleMatch:   makeDstCIDRMatch,
		thirdRuleAction:  MakeRomanaPolicyName,
		fourthBaseChain:  MakeRomanaPolicyNameRules,
		fourthRuleMatch:  MakePolicyRuleWithAction,
		fourthRuleAction: "DROP",
	},
                  
	MakeBlueprintKey(
		api.PolicyDirectionIngress,
		SchemePolicyOnTop,
		PeerCIDR,
		TargetTenantSegment,
	): RuleBlueprint{
		baseChain:        firewall.ChainNameEndpointIngress,
		topRuleMatch:     matchEndpoint(""),
		topRuleAction:    MakeRomanaPolicyName,
		secondBaseChain:  MakeRomanaPolicyName,
		secondRuleMatch:  makeDstTenantSegmentMatch,
		secondRuleAction: MakeRomanaPolicyNameExtended,
		thirdBaseChain:   MakeRomanaPolicyNameExtended,
		thirdRuleMatch:   makeSrcCIDRMatch,
		thirdRuleAction:  MakeRomanaPolicyNameExtended,
		fourthBaseChain:  MakeRomanaPolicyNameRules,
		fourthRuleMatch:  MakePolicyRuleWithAction,
		fourthRuleAction: "ACCEPT",
	},
                  
	MakeBlueprintKey(
		api.PolicyDirectionEgress,
		SchemePolicyOnTop,
		PeerCIDR,
		TargetTenantSegment,
	): RuleBlueprint{
		baseChain:        firewall.ChainNameEndpointEgress,
		topRuleMatch:     matchEndpoint(""),
		topRuleAction:    MakeRomanaPolicyName,
		secondBaseChain:  MakeRomanaPolicyName,
		secondRuleMatch:  makeSrcTenantSegmentMatch,
		secondRuleAction: MakeRomanaPolicyNameExtended,
		thirdBaseChain:   MakeRomanaPolicyNameExtended,
		thirdRuleMatch:   makeDstCIDRMatch,
		thirdRuleAction:  MakeRomanaPolicyNameExtended,
		fourthBaseChain:  MakeRomanaPolicyNameRules,
		fourthRuleMatch:  MakePolicyRuleWithAction,
		fourthRuleAction: "DROP",
	},
                  
	MakeBlueprintKey(
		api.PolicyDirectionIngress,
		SchemeTargetOnTop,
		PeerCIDR,
		TargetTenantSegment,
	): RuleBlueprint{
		baseChain:        firewall.ChainNameEndpointIngress,
		topRuleMatch:     makeDstTenantSegmentMatch,
		topRuleAction:    MakeRomanaPolicyName,
		secondBaseChain:  matchPolicyString(""),
		secondRuleMatch:  matchEndpoint(""),
		secondRuleAction: matchPolicyString(""),
		thirdBaseChain:   MakeRomanaPolicyName,
		thirdRuleMatch:   makeSrcCIDRMatch,
		thirdRuleAction:  MakeRomanaPolicyName,
		fourthBaseChain:  MakeRomanaPolicyNameRules,
		fourthRuleMatch:  MakePolicyRuleWithAction,
		fourthRuleAction: "ACCEPT",
	},
                  
	MakeBlueprintKey(
		api.PolicyDirectionEgress,
		SchemeTargetOnTop,
		PeerCIDR,
		TargetTenantSegment,
	): RuleBlueprint{
		baseChain:        firewall.ChainNameEndpointEgress,
		topRuleMatch:     makeSrcTenantSegmentMatch,
		topRuleAction:    MakeRomanaPolicyName,
		secondBaseChain:  matchPolicyString(""),
		secondRuleMatch:  matchEndpoint(""),
		secondRuleAction: matchPolicyString(""),
		thirdBaseChain:   MakeRomanaPolicyName,
		thirdRuleMatch:   makeDstCIDRMatch,
		thirdRuleAction:  MakeRomanaPolicyName,
		fourthBaseChain:  MakeRomanaPolicyNameRules,
		fourthRuleMatch:  MakePolicyRuleWithAction,
		fourthRuleAction: "DROP",
	},
                  
	MakeBlueprintKey(
		api.PolicyDirectionIngress,
		SchemePolicyOnTop,
		PeerTenant,
		TargetTenant,
	): RuleBlueprint{
		baseChain:        firewall.ChainNameEndpointIngress,
		topRuleMatch:     matchEndpoint(""),
		topRuleAction:    MakeRomanaPolicyName,
		secondBaseChain:  MakeRomanaPolicyName,
		secondRuleMatch:  makeDstTenantMatch,
		secondRuleAction: MakeRomanaPolicyNameExtended,
		thirdBaseChain:   MakeRomanaPolicyNameExtended,
		thirdRuleMatch:   makeSrcTenantMatch,
		thirdRuleAction:  MakeRomanaPolicyNameExtended,
		fourthBaseChain:  MakeRomanaPolicyNameRules,
		fourthRuleMatch:  MakePolicyRuleWithAction,
		fourthRuleAction: "ACCEPT",
	},
                  
	MakeBlueprintKey(
		api.PolicyDirectionEgress,
		SchemePolicyOnTop,
		PeerTenant,
		TargetTenant,
	): RuleBlueprint{
		baseChain:        firewall.ChainNameEndpointEgress,
		topRuleMatch:     matchEndpoint(""),
		topRuleAction:    MakeRomanaPolicyName,
		secondBaseChain:  MakeRomanaPolicyName,
		secondRuleMatch:  makeSrcTenantMatch,
		secondRuleAction: MakeRomanaPolicyNameExtended,
		thirdBaseChain:   MakeRomanaPolicyNameExtended,
		thirdRuleMatch:   makeDstTenantMatch,
		thirdRuleAction:  MakeRomanaPolicyNameExtended,
		fourthBaseChain:  MakeRomanaPolicyNameRules,
		fourthRuleMatch:  MakePolicyRuleWithAction,
		fourthRuleAction: "DROP",
	},
                  
	MakeBlueprintKey(
		api.PolicyDirectionIngress,
		SchemeTargetOnTop,
		PeerTenant,
		TargetTenant,
	): RuleBlueprint{
		baseChain:        firewall.ChainNameEndpointIngress,
		topRuleMatch:     makeDstTenantMatch,
		topRuleAction:    MakeRomanaPolicyName,
		secondBaseChain:  matchPolicyString(""),
		secondRuleMatch:  matchEndpoint(""),
		secondRuleAction: matchPolicyString(""),
		thirdBaseChain:   MakeRomanaPolicyName,
		thirdRuleMatch:   makeSrcTenantMatch,
		thirdRuleAction:  MakeRomanaPolicyName,
		fourthBaseChain:  MakeRomanaPolicyNameRules,
		fourthRuleMatch:  MakePolicyRuleWithAction,
		fourthRuleAction: "ACCEPT",
	},
                  
	MakeBlueprintKey(
		api.PolicyDirectionEgress,
		SchemeTargetOnTop,
		PeerTenant,
		TargetTenant,
	): RuleBlueprint{
		baseChain:        firewall.ChainNameEndpointEgress,
		topRuleMatch:     makeSrcTenantMatch,
		topRuleAction:    MakeRomanaPolicyName,
		secondBaseChain:  matchPolicyString(""),
		secondRuleMatch:  matchEndpoint(""),
		secondRuleAction: matchPolicyString(""),
		thirdBaseChain:   MakeRomanaPolicyName,
		thirdRuleMatch:   makeDstTenantMatch,
		thirdRuleAction:  MakeRomanaPolicyName,
		fourthBaseChain:  MakeRomanaPolicyNameRules,
		fourthRuleMatch:  MakePolicyRuleWithAction,
		fourthRuleAction: "DROP",
	},
                  
	MakeBlueprintKey(
		api.PolicyDirectionIngress,
		SchemePolicyOnTop,
		PeerTenantSegment,
		TargetTenant,
	): RuleBlueprint{
		baseChain:        firewall.ChainNameEndpointIngress,
		topRuleMatch:     matchEndpoint(""),
		topRuleAction:    MakeRomanaPolicyName,
		secondBaseChain:  MakeRomanaPolicyName,
		secondRuleMatch:  makeDstTenantMatch,
		secondRuleAction: MakeRomanaPolicyNameExtended,
		thirdBaseChain:   MakeRomanaPolicyNameExtended,
		thirdRuleMatch:   makeSrcTenantSegmentMatch,
		thirdRuleAction:  MakeRomanaPolicyNameExtended,
		fourthBaseChain:  MakeRomanaPolicyNameRules,
		fourthRuleMatch:  MakePolicyRuleWithAction,
		fourthRuleAction: "ACCEPT",
	},
                  
	MakeBlueprintKey(
		api.PolicyDirectionEgress,
		SchemePolicyOnTop,
		PeerTenantSegment,
		TargetTenant,
	): RuleBlueprint{
		baseChain:        firewall.ChainNameEndpointEgress,
		topRuleMatch:     matchEndpoint(""),
		topRuleAction:    MakeRomanaPolicyName,
		secondBaseChain:  MakeRomanaPolicyName,
		secondRuleMatch:  makeSrcTenantMatch,
		secondRuleAction: MakeRomanaPolicyNameExtended,
		thirdBaseChain:   MakeRomanaPolicyNameExtended,
		thirdRuleMatch:   makeDstTenantSegmentMatch,
		thirdRuleAction:  MakeRomanaPolicyNameExtended,
		fourthBaseChain:  MakeRomanaPolicyNameRules,
		fourthRuleMatch:  MakePolicyRuleWithAction,
		fourthRuleAction: "DROP",
	},
                  
	MakeBlueprintKey(
		api.PolicyDirectionIngress,
		SchemeTargetOnTop,
		PeerTenantSegment,
		TargetTenant,
	): RuleBlueprint{
		baseChain:        firewall.ChainNameEndpointIngress,
		topRuleMatch:     makeDstTenantMatch,
		topRuleAction:    MakeRomanaPolicyName,
		secondBaseChain:  matchPolicyString(""),
		secondRuleMatch:  matchEndpoint(""),
		secondRuleAction: matchPolicyString(""),
		thirdBaseChain:   MakeRomanaPolicyName,
		thirdRuleMatch:   makeSrcTenantSegmentMatch,
		thirdRuleAction:  MakeRomanaPolicyName,
		fourthBaseChain:  MakeRomanaPolicyNameRules,
		fourthRuleMatch:  MakePolicyRuleWithAction,
		fourthRuleAction: "ACCEPT",
	},
                  
	MakeBlueprintKey(
		api.PolicyDirectionEgress,
		SchemeTargetOnTop,
		PeerTenantSegment,
		TargetTenant,
	): RuleBlueprint{
		baseChain:        firewall.ChainNameEndpointEgress,
		topRuleMatch:     makeSrcTenantMatch,
		topRuleAction:    MakeRomanaPolicyName,
		secondBaseChain:  matchPolicyString(""),
		secondRuleMatch:  matchEndpoint(""),
		secondRuleAction: matchPolicyString(""),
		thirdBaseChain:   MakeRomanaPolicyName,
		thirdRuleMatch:   makeDstTenantSegmentMatch,
		thirdRuleAction:  MakeRomanaPolicyName,
		fourthBaseChain:  MakeRomanaPolicyNameRules,
		fourthRuleMatch:  MakePolicyRuleWithAction,
		fourthRuleAction: "DROP",
	},
                  
	MakeBlueprintKey(
		api.PolicyDirectionIngress,
		SchemePolicyOnTop,
		PeerTenant,
		TargetTenantSegment,
	): RuleBlueprint{
		baseChain:        firewall.ChainNameEndpointIngress,
		topRuleMatch:     matchEndpoint(""),
		topRuleAction:    MakeRomanaPolicyName,
		secondBaseChain:  MakeRomanaPolicyName,
		secondRuleMatch:  makeDstTenantSegmentMatch,
		secondRuleAction: MakeRomanaPolicyNameExtended,
		thirdBaseChain:   MakeRomanaPolicyNameExtended,
		thirdRuleMatch:   makeSrcTenantMatch,
		thirdRuleAction:  MakeRomanaPolicyNameExtended,
		fourthBaseChain:  MakeRomanaPolicyNameRules,
		fourthRuleMatch:  MakePolicyRuleWithAction,
		fourthRuleAction: "ACCEPT",
	},
                  
	MakeBlueprintKey(
		api.PolicyDirectionEgress,
		SchemePolicyOnTop,
		PeerTenant,
		TargetTenantSegment,
	): RuleBlueprint{
		baseChain:        firewall.ChainNameEndpointEgress,
		topRuleMatch:     matchEndpoint(""),
		topRuleAction:    MakeRomanaPolicyName,
		secondBaseChain:  MakeRomanaPolicyName,
		secondRuleMatch:  makeSrcTenantSegmentMatch,
		secondRuleAction: MakeRomanaPolicyNameExtended,
		thirdBaseChain:   MakeRomanaPolicyNameExtended,
		thirdRuleMatch:   makeDstTenantMatch,
		thirdRuleAction:  MakeRomanaPolicyNameExtended,
		fourthBaseChain:  MakeRomanaPolicyNameRules,
		fourthRuleMatch:  MakePolicyRuleWithAction,
		fourthRuleAction: "DROP",
	},
                  
	MakeBlueprintKey(
		api.PolicyDirectionIngress,
		SchemeTargetOnTop,
		PeerTenant,
		TargetTenantSegment,
	): RuleBlueprint{
		baseChain:        firewall.ChainNameEndpointIngress,
		topRuleMatch:     makeDstTenantSegmentMatch,
		topRuleAction:    MakeRomanaPolicyName,
		secondBaseChain:  matchPolicyString(""),
		secondRuleMatch:  matchEndpoint(""),
		secondRuleAction: matchPolicyString(""),
		thirdBaseChain:   MakeRomanaPolicyName,
		thirdRuleMatch:   makeSrcTenantMatch,
		thirdRuleAction:  MakeRomanaPolicyName,
		fourthBaseChain:  MakeRomanaPolicyNameRules,
		fourthRuleMatch:  MakePolicyRuleWithAction,
		fourthRuleAction: "ACCEPT",
	},
                  
	MakeBlueprintKey(
		api.PolicyDirectionEgress,
		SchemeTargetOnTop,
		PeerTenant,
		TargetTenantSegment,
	): RuleBlueprint{
		baseChain:        firewall.ChainNameEndpointEgress,
		topRuleMatch:     makeSrcTenantSegmentMatch,
		topRuleAction:    MakeRomanaPolicyName,
		secondBaseChain:  matchPolicyString(""),
		secondRuleMatch:  matchEndpoint(""),
		secondRuleAction: matchPolicyString(""),
		thirdBaseChain:   MakeRomanaPolicyName,
		thirdRuleMatch:   makeDstTenantMatch,
		thirdRuleAction:  MakeRomanaPolicyName,
		fourthBaseChain:  MakeRomanaPolicyNameRules,
		fourthRuleMatch:  MakePolicyRuleWithAction,
		fourthRuleAction: "DROP",
	},
                  
	MakeBlueprintKey(
		api.PolicyDirectionIngress,
		SchemePolicyOnTop,
		PeerTenantSegment,
		TargetTenantSegment,
	): RuleBlueprint{
		baseChain:        firewall.ChainNameEndpointIngress,
		topRuleMatch:     matchEndpoint(""),
		topRuleAction:    MakeRomanaPolicyName,
		secondBaseChain:  MakeRomanaPolicyName,
		secondRuleMatch:  makeDstTenantSegmentMatch,
		secondRuleAction: MakeRomanaPolicyNameExtended,
		thirdBaseChain:   MakeRomanaPolicyNameExtended,
		thirdRuleMatch:   makeSrcTenantSegmentMatch,
		thirdRuleAction:  MakeRomanaPolicyNameExtended,
		fourthBaseChain:  MakeRomanaPolicyNameRules,
		fourthRuleMatch:  MakePolicyRuleWithAction,
		fourthRuleAction: "ACCEPT",
	},
                  
	MakeBlueprintKey(
		api.PolicyDirectionEgress,
		SchemePolicyOnTop,
		PeerTenantSegment,
		TargetTenantSegment,
	): RuleBlueprint{
		baseChain:        firewall.ChainNameEndpointEgress,
		topRuleMatch:     matchEndpoint(""),
		topRuleAction:    MakeRomanaPolicyName,
		secondBaseChain:  MakeRomanaPolicyName,
		secondRuleMatch:  makeSrcTenantSegmentMatch,
		secondRuleAction: MakeRomanaPolicyNameExtended,
		thirdBaseChain:   MakeRomanaPolicyNameExtended,
		thirdRuleMatch:   makeDstTenantSegmentMatch,
		thirdRuleAction:  MakeRomanaPolicyNameExtended,
		fourthBaseChain:  MakeRomanaPolicyNameRules,
		fourthRuleMatch:  MakePolicyRuleWithAction,
		fourthRuleAction: "DROP",
	},
                  
	MakeBlueprintKey(
		api.PolicyDirectionIngress,
		SchemeTargetOnTop,
		PeerTenantSegment,
		TargetTenantSegment,
	): RuleBlueprint{
		baseChain:        firewall.ChainNameEndpointIngress,
		topRuleMatch:     makeDstTenantSegmentMatch,
		topRuleAction:    MakeRomanaPolicyName,
		secondBaseChain:  matchPolicyString(""),
		secondRuleMatch:  matchEndpoint(""),
		secondRuleAction: matchPolicyString(""),
		thirdBaseChain:   MakeRomanaPolicyName,
		thirdRuleMatch:   makeSrcTenantSegmentMatch,
		thirdRuleAction:  MakeRomanaPolicyName,
		fourthBaseChain:  MakeRomanaPolicyNameRules,
		fourthRuleMatch:  MakePolicyRuleWithAction,
		fourthRuleAction: "ACCEPT",
	},
                  
	MakeBlueprintKey(
		api.PolicyDirectionEgress,
		SchemeTargetOnTop,
		PeerTenantSegment,
		TargetTenantSegment,
	): RuleBlueprint{
		baseChain:        firewall.ChainNameEndpointEgress,
		topRuleMatch:     makeSrcTenantSegmentMatch,
		topRuleAction:    MakeRomanaPolicyName,
		secondBaseChain:  matchPolicyString(""),
		secondRuleMatch:  matchEndpoint(""),
		secondRuleAction: matchPolicyString(""),
		thirdBaseChain:   MakeRomanaPolicyName,
		thirdRuleMatch:   makeDstTenantSegmentMatch,
		thirdRuleAction:  MakeRomanaPolicyName,
		fourthBaseChain:  MakeRomanaPolicyNameRules,
		fourthRuleMatch:  MakePolicyRuleWithAction,
		fourthRuleAction: "DROP",
	},
                  
	MakeBlueprintKey(
		api.PolicyDirectionIngress,
		SchemePolicyOnTop,
		PeerTenant,
		TargetHost,
	): RuleBlueprint{
		baseChain:        firewall.ChainNameHostToEndpoint,
		topRuleMatch:     matchEndpoint(""),
		topRuleAction:    MakeRomanaPolicyName,
		secondBaseChain:  matchPolicyString(""),
		secondRuleMatch:  matchEndpoint(""),
		secondRuleAction: matchPolicyString(""),
		thirdBaseChain:   MakeRomanaPolicyName,
		thirdRuleMatch:   makeSrcTenantMatch,
		thirdRuleAction:  MakeRomanaPolicyName,
		fourthBaseChain:  MakeRomanaPolicyNameRules,
		fourthRuleMatch:  MakePolicyRuleWithAction,
		fourthRuleAction: "ACCEPT",
	},
                                    
	MakeBlueprintKey(
		api.PolicyDirectionIngress,
		SchemeTargetOnTop,
		PeerTenant,
		TargetHost,
	): RuleBlueprint{
		baseChain:        firewall.ChainNameHostToEndpoint,
		topRuleMatch:     matchEndpoint(""),
		topRuleAction:    MakeRomanaPolicyName,
		secondBaseChain:  matchPolicyString(""),
		secondRuleMatch:  matchEndpoint(""),
		secondRuleAction: matchPolicyString(""),
		thirdBaseChain:   MakeRomanaPolicyName,
		thirdRuleMatch:   makeSrcTenantMatch,
		thirdRuleAction:  MakeRomanaPolicyName,
		fourthBaseChain:  MakeRomanaPolicyNameRules,
		fourthRuleMatch:  MakePolicyRuleWithAction,
		fourthRuleAction: "ACCEPT",
	},
                                    
	MakeBlueprintKey(
		api.PolicyDirectionIngress,
		SchemePolicyOnTop,
		PeerTenantSegment,
		TargetHost,
	): RuleBlueprint{
		baseChain:        firewall.ChainNameHostToEndpoint,
		topRuleMatch:     matchEndpoint(""),
		topRuleAction:    MakeRomanaPolicyName,
		secondBaseChain:  matchPolicyString(""),
		secondRuleMatch:  matchEndpoint(""),
		secondRuleAction: matchPolicyString(""),
		thirdBaseChain:   MakeRomanaPolicyName,
		thirdRuleMatch:   makeSrcTenantSegmentMatch,
		thirdRuleAction:  MakeRomanaPolicyName,
		fourthBaseChain:  MakeRomanaPolicyNameRules,
		fourthRuleMatch:  MakePolicyRuleWithAction,
		fourthRuleAction: "ACCEPT",
	},
                                    
	MakeBlueprintKey(
		api.PolicyDirectionIngress,
		SchemeTargetOnTop,
		PeerTenantSegment,
		TargetHost,
	): RuleBlueprint{
		baseChain:        firewall.ChainNameHostToEndpoint,
		topRuleMatch:     matchEndpoint(""),
		topRuleAction:    MakeRomanaPolicyName,
		secondBaseChain:  matchPolicyString(""),
		secondRuleMatch:  matchEndpoint(""),
		secondRuleAction: matchPolicyString(""),
		thirdBaseChain:   MakeRomanaPolicyName,
		thirdRuleMatch:   makeSrcTenantSegmentMatch,
		thirdRuleAction:  MakeRomanaPolicyName,
		fourthBaseChain:  MakeRomanaPolicyNameRules,
		fourthRuleMatch:  MakePolicyRuleWithAction,
		fourthRuleAction: "ACCEPT",
	},
                                    
	MakeBlueprintKey(
		api.PolicyDirectionIngress,
		SchemePolicyOnTop,
		PeerLocal,
		TargetHost,
	): RuleBlueprint{
		baseChain:        firewall.ChainNameHostToEndpoint,
		topRuleMatch:     matchEndpoint(""),
		topRuleAction:    MakeRomanaPolicyName,
		secondBaseChain:  matchPolicyString(""),
		secondRuleMatch:  matchEndpoint(""),
		secondRuleAction: matchPolicyString(""),
		thirdBaseChain:   MakeRomanaPolicyName,
		thirdRuleMatch:   matchEndpoint(""),
		thirdRuleAction:  MakeRomanaPolicyName,
		fourthBaseChain:  MakeRomanaPolicyNameRules,
		fourthRuleMatch:  MakePolicyRuleWithAction,
		fourthRuleAction: "ACCEPT",
	},
                                    
	MakeBlueprintKey(
		api.PolicyDirectionIngress,
		SchemeTargetOnTop,
		PeerLocal,
		TargetHost,
	): RuleBlueprint{
		baseChain:        firewall.ChainNameHostToEndpoint,
		topRuleMatch:     matchEndpoint(""),
		topRuleAction:    MakeRomanaPolicyName,
		secondBaseChain:  matchPolicyString(""),
		secondRuleMatch:  matchEndpoint(""),
		secondRuleAction: matchPolicyString(""),
		thirdBaseChain:   MakeRomanaPolicyName,
		thirdRuleMatch:   matchEndpoint(""),
		thirdRuleAction:  MakeRomanaPolicyName,
		fourthBaseChain:  MakeRomanaPolicyNameRules,
		fourthRuleMatch:  MakePolicyRuleWithAction,
		fourthRuleAction: "ACCEPT",
	},
                                                                                           
}
