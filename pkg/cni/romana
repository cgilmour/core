#!/bin/bash -e
# Copyright (c) 2016 Pani Networks
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
# http:#www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

# Romana CNI plugin for kubernetes.
# This plugin integrated with Romana IPAM and will not honour k8s IPAM config.

# DEPENDENCIES
# - nsenter
# - kubectl
# - curl
# - jq

# We need to be very careful with stdout because kubernetes wants valid json
# So we going to save it
exec 6>&1

# and replace stdout with logfile
if [[ -d /var/log/romana ]]; then
	LOGFILE=/var/log/romana/cni.log
else
	LOGFILE=/tmp/romana-cni.log
fi
exec &>> $LOGFILE

# -- Const
NETWORK_NAME="romana-k8s-network"
PLUGIN_TYPE="romana"
IPAM_TYPE="romana-ipam"
ROMANA_CLI="romana"

# -- Helpers
get_pod            () { while read line; do [[ ${line/=*/} == "K8S_POD_NAME" ]] && echo ${line/*=/} || :; done; }
get_pod_ns         () { while read line; do [[ ${line/=*/} == "K8S_POD_NAMESPACE" ]] && echo ${line/*=/} || :; done; }
get_tenant         () { while read line; do [[ ${line/=*/} == "owner" ]] && echo ${line/*=/} || :; done; }
get_json_kv        () { sed 's/["{}]//g' | xargs -d "," -n1; }
get_ip             () { while read line; do [[ ${line/:*/} == "ip" ]] && echo ${line/*:/} || :; done; }
get_nspid          () { echo $1 | awk -F"/" '{ print $3 }'; }
get_args           () { echo $CNI_ARGS | xargs -d";" -n1 ;}
get_config_item    () { echo $INPUT | jq -r ".${1}"; }
get_romana_gate    () { A=$(ip a show romana-gw | awk '/inet / { print $2 }'); echo ${A%%/*}; }
get_romana_mask    () { A=$(ip a show romana-gw | awk '/inet / { print $2 }'); echo ${A##*/}; }
get_iface_name     () { A=$(ip ro show $1 | awk '{ print $3 }'); echo ${A}; }
log                () { echo "$*"; }
log_env            () { env; }
die () {
    echo $1
    # Restore stdout - before reporting an error to Kube
    exec 1>&6

    printf '{ "Error": "%s" }' "$1"
    exit $2
}

trap "die 'CNI plugin - Unexpected error'" EXIT

# -- Config
# Kubernetes pases config via stdin
while read line; do 
    INPUT="$INPUT$line"
done

# Looping over top level json keys
for k in $(echo $INPUT | jq -r 'keys[]'); do
    case $k in
    name)
        [[ $NETWORK_NAME == $(get_config_item $k) ]] || die  "Bad network name - only romana-k8s-network is supported"
        ;;
    kubectl_binary)
        KUBECTL=$(get_config_item $k)
        ;;
    ipam)
        [[ $(get_config_item $k.type) == "romana-ipam" ]] || die  "Bad ipam - only romana-ipam is supported"
        ;;
    kube_master_ip)
        KUBE_MASTER_IP=$(get_config_item $k)
        ;;
    kubectl_args)
        KUBEARGS=$(get_config_item $k)
        ;;
    romana_master_url)
        ROMANA_MASTER_URL=$(get_config_item $k)
        ;;
    romana_cli_config)
        ROMANA_CLI="$ROMANA_CLI -c $(get_config_item $k)"
        ;;
    segment_label_name)
        SEGMENT_LABEL_NAME=$(get_config_item $k)
        ;;
        esac
done

# -- Defaults
[[ $SEGMENT_LABEL_NAME ]] || die "segment_label_name required in config - not found" 1
[[ $KUBE_MASTER_IP ]]     || die "kube_master_ip required in config - not found" 1
[[ $ROMANA_MASTER_IP ]]   || ROMANA_MASTER_IP=$KUBE_MASTER_IP
[[ $ROMANA_MASTER_URL ]]  || ROMANA_MASTER_URL="http://$ROMANA_MASTER_IP:9600"
[[ $KUBECTL ]]            || KUBECTL=kubectl
[[ $KUBEARGS ]]           || KUBEARGS=" -s $KUBE_MASTER_IP:8080"

GATE_SRC=$(get_romana_gate)
GATE_MASK=$(get_romana_mask)

log "Romana CNI plugin"
log "$*"
log_env

result () {
    ip=$1
    mask=$2
    printf '{ "cniVersion": "0.1.0", "ip4": { "ip": "%s/%s" } }' $ip $mask
}

req () {
    # TODO currently romana agent expects valid mac address on k8s endpoint even though it not needed there
    iface=$1
    ip=$2
    ns_isloation=$3
    printf '{ "net_if" : { "interface_name": "%s", "mac_address": "de:ad:be:ef:00:00", "ip_address" : "%s" }, "options" : { "namespace_isolation" : "%s"} }' $iface $ip $ns_isloation
}

find_romana_service() {
    svc_name=$1
    url=`curl -s "$ROMANA_MASTER_URL" |  jq ".services | .[] | if .name == \"$svc_name\" then .links[0].href  else empty end" | sed -e "s/\"//g"`
    echo $url
}

find_agent_port() {
    agent_config_url=`curl -s "$ROMANA_MASTER_URL" |  jq ".links  | .[] | if .rel==\"agent-config\" then .href else empty end" | sed -e "s/\"//g"`
    url=${ROMANA_MASTER_URL}`echo ${agent_config_url}`
    port=`curl -s $url|jq ".common.api.port"`
    echo $port
}

find_romana_id () {
    entity_type=$1
    field_name=$2
    field_value=$3
    svc=""
    if [[ "$entity_type" == "tenant" ]]; then
        svc="tenant"
    elif [[ "$entity_type" == "segment" ]]; then
        svc="tenant"
    elif [[ "$entity_type" == "host" ]]; then
        svc="topology"
    else
        trap "Don't know how to deal with $entity_type." EXIT
    fi
    svc_url=$(find_romana_service $svc)
    find_url="${svc_url}/findLast/${entity_type}s?${field_name}=${field_value}"
    id=`curl -s "$find_url" | jq '.id' | sed -e "s/\"//g"`
    echo $id
}

ipam_allocate_ip () {
    # CNI expects us to read ipam config from stdin, but for demo config is static anyway.
    tenant=$1
    segment=$2
    node=$3
    romana_tenant_id=$(find_romana_id 'tenant' 'name' $tenant)
    romana_segment_id=$(find_romana_id 'segment' 'name' $segment)
    romana_host_id=$(find_romana_id 'host' 'name' $node)
    ipam_service_url=$(find_romana_service 'ipam')
    url="${ipam_service_url}/endpoints"
    payload="{\"tenant_id\" : \"${romana_tenant_id}\", \"segment_id\" : \"${romana_segment_id}\", \"host_id\" : \"${romana_host_id}\" }"
    ip=`curl -s -H 'content-type: application/json' -X POST -d "${payload}" $url | jq '.ip' | sed -e "s/\"//g"`
    echo $ip
}

set_up_pod () {
    # Getting additional information from kubernetes
    log "--- ADD --"
    NSPID=$(get_nspid "$CNI_NETNS")
    log "--- nspid = $NSPID ---"
    POD=$(get_args | get_pod)
    log "--- POD = $POD ---"
    NAMESPACE=$(get_args | get_pod_ns)
    log "--- NAMESPACE = $NAMESPACE ---"
    KUBEARGS="$KUBEARGS --namespace=$NAMESPACE"
#    TENANT=$( $KUBECTL $KUBEARGS describe pod $POD | get_labels | get_tenant )
#    log "--- TENANT = $TENANT ---"
    SEGMENT=$( $KUBECTL $KUBEARGS get pod $POD -o json | jq -r 'if .metadata.labels["'$SEGMENT_LABEL_NAME'"] then .metadata.labels["'$SEGMENT_LABEL_NAME'"] else empty end')
    [[ $SEGMENT ]] || SEGMENT="default"
    log "--- SEGMENT = $SEGMENT ---"
    NODE=$( $KUBECTL $KUBEARGS get pod "$POD" -o json | jq -r '.spec.nodeName')
    log "--- NODE = $NODE ---"
    NS_ISOLATION="off"
    # The metadata value for isolation is now a JSON object. Since we ask kubectl to give us namespace data in JSON, we need two steps to extract it.
    # Extract the network policy from the namespace annotation. Capture the value.
    NS_POLICY=$( $KUBECTL $KUBEARGS get namespace $NAMESPACE -o json | jq -r '.metadata.annotations["net.beta.kubernetes.io/networkpolicy"] // empty')
    if [[ "$NS_POLICY" ]]; then
        # We have a value. Try to extract the ingress -> isolation field.
        INGRESS_ISOLATION=$(jq -r '.ingress.isolation // empty' <<< "$NS_POLICY")
        if [[ "$INGRESS_ISOLATION" = "DefaultDeny" ]]; then
            # Field was present and matched the known "DefaultDeny" value. Enable isolation.
            NS_ISOLATION="on"
        fi
    fi
    log "--- NS_ISOLATION = $NS_ISOLATION ---"

    # Ensure segment exists
    log "-- Ensuring segment for tenant $NAMESPACE --"
    SEGMENT_CHECK=$($ROMANA_CLI segment list $NAMESPACE -f json | jq -r --arg seg $SEGMENT  'if . != 0 then (reverse|.[0] |.Segments[] | if .name==$seg then "OK" else empty end) else empty end')
    if ! [[ $SEGMENT_CHECK ]]; then
        log "--- SEGMENT $SEGMENT does not exist - creating ---"
        $ROMANA_CLI segment add $NAMESPACE $SEGMENT -i $SEGMENT
    else
        log "--- SEGMENT $SEGMENT exists ---"
    fi

    # Asking romana ipam for an IP address, based on `tenant` label.
    log "--- PRE-IPAM ---"
    [[ $SEGMENT ]] || SEGMENT=default
    IP=$(ipam_allocate_ip $NAMESPACE $SEGMENT $NODE)
    log "--- POST-IPAM IP=$IP---"
    [[ $IP ]] || die "Failed to allocate IP address for pod $POD on node $NODE with tenant $NAMESPACE" 2

    # Setting up the networking for Infra namespace
    sudo ip link add "veth0-${NSPID}" type veth peer name "veth1-${NSPID}"
    sudo ip link set "veth1-${NSPID}" netns ${NSPID}
    sudo nsenter -t ${NSPID} -n ip link set "veth1-${NSPID}" name eth0
    sudo nsenter -t ${NSPID} -n ip link set eth0 up
    sudo nsenter -t ${NSPID} -n ip addr add $IP/32 dev eth0
    sudo nsenter -t ${NSPID} -n ip ro add $GATE_SRC dev eth0
    sudo nsenter -t ${NSPID} -n ip ro add default via $GATE_SRC dev eth0
    sudo ip link set "veth0-${NSPID}" up

    log "$(req "veth0-${NSPID}" "$IP" "$NS_ISOLATION")"
    # Romana agent does the rest (endpoint route and firewall)
    agent_port=$(find_agent_port)
    curl -s -H 'content-type: application/json' -XPOST -d "$(req "veth0-${NSPID}" "$IP" "$NS_ISOLATION")" http://localhost:${agent_port}/pod 2>&1 >> $LOGFILE

    log "$(req "veth0-${NSPID}" "$IP" "$NS_ISOLATION")"
    log "--- Setup with infra pod = $POD pid = $PID, PEERIFx = $PEERIFx, PEERIFn=$PEERIFn, TENANT=$NAMESPACE, NODE=$NODE, IP=$IP"
    R=$(result "$IP" "$GATE_MASK")
    log "$R"

    # Restore stdout - ready to talk back to kubernetes
    exec 1>&6

    # Kubernetes expects valid json on output so no one above should echo anything in stdout
    echo -n $R
}

pod_down () {
    POD=$(get_args | get_pod)
    log "--- POD = $POD ---"
    NAMESPACE=$(get_args | get_pod_ns)
    log "--- NAMESPACE = $NAMESPACE ---"
    KUBEARGS="$KUBEARGS --namespace=$NAMESPACE"
    log "--- KUBEARGS = $KUBEARGS ---"
    POD_IP=$( $KUBECTL $KUBEARGS get pod $POD -o json | jq -r '.status.podIP' )
    log "--- POD_IP = ${POD_IP} ---"
    IFACE=$( get_iface_name "$POD_IP" )
    log "--- IFACE = ${IFACE} ---"

    log "$(req "${IFACE}" "$IP" "$NS_ISOLATION")"
    # Romana agent does the rest (endpoint route and firewall)
    curl -s -XDELETE -H 'content-type: application/json' -d "$(req "${IFACE}" "$POD_IP")" http://localhost:9604/pod 2>&1 >> $LOGFILE

    # Deallocate ip address
    curl -s -XDELETE "http://$ROMANA_MASTER_IP:9601/endpoints/$POD_IP"

    # Restore stdout - ready to talk back to kubernetes
    exec 1>&6
}

case $CNI_COMMAND in
    ADD)
        set_up_pod
        ;;
    DEL)
        pod_down
        ;;
    STATUS)
        # Not implemented in kubernetes yet
        :
        ;;
esac
# normal exit shouldn't trigger trap
trap - EXIT
